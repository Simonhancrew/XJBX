## 进程，线程和调度算法

![导图](./pic/1.png)

进程的非公式定义非常的简单，就是运行中的程序。它是没有生命周期的。我们同工厂希望多个程序能够同时运行，但是cpu是有限的，所以如何抽象出多个cpu成了关键。

这里我们分片的执行各个程序，就完成了多个cpu的抽象。这也就是时分技术，允许多个并发进程，潜在损失就是会失去些许性能。

考虑到近现代储存器的io性能问题，阻塞的执行单个线程的时候，cpu的利用率往往也比较低。这种可以在io时去做别的事情，当io结束之后，cpu又会收到一个中断，之后继续运行。

事实上，大家经常混淆并发和并行的概念，并发时单处理器，虚拟出多个程序执行的假象。并行时多处理器，同时处理多任务。

### 进程的状态

很自然的想到进程的几个状态问题

1. 运行（占用了cpu）
2. 就绪（在队列中就绪，可以运行，但是其他进程处于运行状态而停止运行）
3. 阻塞（等待某一时间发生而被暂停运行）

当然还有结束和创建态

大量的阻塞态是浪费运行空间的，所以，在虚拟内存管理的操作系统中，通常会把阻塞状态的进程的物理内存空间换出到硬盘，等需要再次运⾏的时候，再从硬盘换⼊到物理内存。

描述进程没有占⽤实际的物理内存空间的情况，这个状态就是挂起状态

### 进程的控制结构

在操作系统中，是⽤进程控制块（process control block   PCB）数据结构来描述进程的

